{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, useState } from 'react';\nimport { uniqueId } from '../util/DataUtils';\nimport { usePlotArea } from '../hooks';\nvar ClipPathIdContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Generates a unique clip path ID for use in SVG elements,\n * and puts it in a context provider.\n *\n * To read the clip path ID, use the `useClipPathId` hook,\n * or render `<ClipPath>` component which will automatically use the ID from this context.\n *\n * @param props children - React children to be wrapped by the provider\n * @returns React Context Provider\n */\nexport var ClipPathProvider = _ref => {\n  var {\n    children\n  } = _ref;\n  var [clipPathId] = useState(\"\".concat(uniqueId('recharts'), \"-clip\"));\n  var plotArea = usePlotArea();\n  if (plotArea == null) {\n    return null;\n  }\n  var {\n    x,\n    y,\n    width,\n    height\n  } = plotArea;\n  return /*#__PURE__*/React.createElement(ClipPathIdContext.Provider, {\n    value: clipPathId\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: x,\n    y: y,\n    height: height,\n    width: width\n  }))), children);\n};\nexport var useClipPathId = () => {\n  return useContext(ClipPathIdContext);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}