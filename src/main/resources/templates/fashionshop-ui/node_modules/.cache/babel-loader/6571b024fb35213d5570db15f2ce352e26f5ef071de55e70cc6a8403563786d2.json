{"ast":null,"code":"import IMask from 'imask/esm/imask';\nimport { useRef, useState, useCallback, useEffect } from 'react';\nfunction useIMask(opts, _temp) {\n  let {\n    onAccept,\n    onComplete,\n    ref = useRef(null),\n    defaultValue,\n    defaultUnmaskedValue,\n    defaultTypedValue\n  } = _temp === void 0 ? {} : _temp;\n  const maskRef = useRef(null);\n  const [lastAcceptState, setLastAcceptState] = useState({});\n  const [value, setValue] = useState('');\n  const [unmaskedValue, setUnmaskedValue] = useState('');\n  const [typedValue, setTypedValue] = useState();\n  const _destroyMask = useCallback(() => {\n    var _maskRef$current;\n    (_maskRef$current = maskRef.current) == null || _maskRef$current.destroy();\n    maskRef.current = null;\n  }, []);\n  const storeLastAcceptedValues = useCallback(() => {\n    const m = maskRef.current;\n    if (!m) return;\n    setLastAcceptState({\n      value: m.value,\n      unmaskedValue: m.unmaskedValue,\n      typedValue: m.typedValue\n    });\n    setTypedValue(m.typedValue);\n    setUnmaskedValue(m.unmaskedValue);\n    setValue(m.value);\n  }, []);\n  const _onAccept = useCallback(event => {\n    const m = maskRef.current;\n    if (!m) return;\n    storeLastAcceptedValues();\n    onAccept == null || onAccept(m.value, m, event);\n  }, [onAccept]);\n  const _onComplete = useCallback(event => maskRef.current && (onComplete == null ? void 0 : onComplete(maskRef.current.value, maskRef.current, event)), [onComplete]);\n  useEffect(() => {\n    const {\n      value: lastAcceptValue,\n      ...state\n    } = lastAcceptState;\n    const mask = maskRef.current;\n    if (!mask || value === undefined) return;\n    if (lastAcceptValue !== value) {\n      mask.value = value;\n      if (mask.value !== value) _onAccept();\n    }\n    setLastAcceptState(state);\n  }, [value]);\n  useEffect(() => {\n    const {\n      unmaskedValue: lastAcceptUnmaskedValue,\n      ...state\n    } = lastAcceptState;\n    const mask = maskRef.current;\n    if (!mask || unmaskedValue === undefined) return;\n    if (lastAcceptUnmaskedValue !== unmaskedValue) {\n      mask.unmaskedValue = unmaskedValue;\n      if (mask.unmaskedValue !== unmaskedValue) _onAccept();\n    }\n    setLastAcceptState(state);\n  }, [unmaskedValue]);\n  useEffect(() => {\n    const {\n      typedValue: lastAcceptTypedValue,\n      ...state\n    } = lastAcceptState;\n    const mask = maskRef.current;\n    if (!mask || typedValue === undefined) return;\n    if (lastAcceptTypedValue !== typedValue) {\n      mask.typedValue = typedValue;\n      if (!mask.masked.typedValueEquals(typedValue)) _onAccept();\n    }\n    setLastAcceptState(state);\n  }, [typedValue]);\n  useEffect(() => {\n    const el = ref.current;\n    if (!el || !(opts != null && opts.mask)) return _destroyMask();\n    const mask = maskRef.current;\n    if (!mask) {\n      if (el && opts != null && opts.mask) {\n        maskRef.current = IMask(el, opts);\n        storeLastAcceptedValues();\n        if (defaultValue !== undefined) setValue(defaultValue);\n        if (defaultUnmaskedValue !== undefined) setUnmaskedValue(defaultUnmaskedValue);\n        if (defaultTypedValue !== undefined) setTypedValue(defaultTypedValue);\n      }\n    } else {\n      mask == null || mask.updateOptions(opts); // TODO fix no idea\n    }\n  }, [opts, _destroyMask, _onAccept]);\n  useEffect(() => {\n    if (!maskRef.current) return;\n    const mask = maskRef.current;\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n    return () => {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n  useEffect(() => _destroyMask, [_destroyMask]);\n  return {\n    ref,\n    maskRef,\n    value,\n    setValue,\n    unmaskedValue,\n    setUnmaskedValue,\n    typedValue,\n    setTypedValue\n  };\n}\nexport { useIMask as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}