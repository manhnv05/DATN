{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask/esm/imask';\nconst MASK_PROPS = {\n  // common\n  mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([Date, Number, IMask.Masked]), PropTypes.instanceOf(IMask.Masked)]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['typed'])]),\n  prepare: PropTypes.func,\n  prepareChar: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['shift'])]),\n  eager: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['append', 'remove'])]),\n  skipInvalid: PropTypes.bool,\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n  // pattern\n  placeholderChar: PropTypes.string,\n  displayChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n  // enum\n  enum: PropTypes.arrayOf(PropTypes.string),\n  // range\n  maxLength: PropTypes.number,\n  from: PropTypes.number,\n  to: PropTypes.number,\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['pad'])]),\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  max: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Date)]),\n  // dynamic\n  dispatch: PropTypes.func,\n  // ref\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })])\n};\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS).filter(p => p !== 'value');\nconst NON_MASK_OPTIONS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_NAMES = MASK_PROPS_NAMES.filter(pName => NON_MASK_OPTIONS_NAMES.indexOf(pName) < 0);\nfunction IMaskMixin(ComposedComponent) {\n  var _Class;\n  const MaskedComponent = (_Class = class MaskedComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n    componentDidMount() {\n      if (!this.props.mask) return;\n      this.initMask();\n    }\n    componentDidUpdate() {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions); // TODO fix\n          if ('value' in props && props.value !== undefined) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props && props.value !== undefined) {\n          var _this$element;\n          if ((_this$element = this.element) != null && _this$element.isContentEditable && this.element.tagName !== 'INPUT' && this.element.tagName !== 'TEXTAREA') this.element.textContent = props.value;else this.element.value = props.value;\n        }\n      }\n    }\n    componentWillUnmount() {\n      this.destroyMask();\n    }\n    _inputRef(el) {\n      this.element = el;\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current')) this.props.inputRef.current = el;else this.props.inputRef(el);\n      }\n    }\n    initMask(maskOptions) {\n      if (maskOptions === void 0) {\n        maskOptions = this._extractMaskOptionsFromProps(this.props);\n      }\n      this.maskRef = IMask(this.element, maskOptions).on('accept', this._onAccept.bind(this)).on('complete', this._onComplete.bind(this));\n      if ('value' in this.props && this.props.value !== undefined) this.maskValue = this.props.value;\n    }\n    destroyMask() {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n    _extractMaskOptionsFromProps(props) {\n      const {\n        ...cloneProps\n      } = props;\n\n      // keep only mask options\n      Object.keys(cloneProps).filter(prop => MASK_OPTIONS_NAMES.indexOf(prop) < 0).forEach(nonMaskProp => {\n        delete cloneProps[nonMaskProp];\n      });\n      return cloneProps;\n    }\n    _extractNonMaskProps(props) {\n      const {\n        ...cloneProps\n      } = props;\n      MASK_PROPS_NAMES.forEach(maskProp => {\n        if (maskProp !== 'maxLength') delete cloneProps[maskProp];\n      });\n      if (!('defaultValue' in cloneProps)) cloneProps.defaultValue = props.mask ? '' : cloneProps.value;\n      delete cloneProps.value;\n      return cloneProps;\n    }\n    get maskValue() {\n      if (!this.maskRef) return '';\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue;\n      if (this.props.unmask) return this.maskRef.unmaskedValue;\n      return this.maskRef.value;\n    }\n    set maskValue(value) {\n      if (!this.maskRef) return;\n      value = value == null && this.props.unmask !== 'typed' ? '' : value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value;else if (this.props.unmask) this.maskRef.unmaskedValue = value;else this.maskRef.value = value;\n    }\n    _onAccept(e) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n    _onComplete(e) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n    render() {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef\n      });\n    }\n  }, _Class.displayName = void 0, _Class.propTypes = void 0, _Class);\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = \"IMask(\" + nestedComponentName + \")\";\n  MaskedComponent.propTypes = MASK_PROPS;\n  return React.forwardRef((props, ref) => React.createElement(MaskedComponent, {\n    ...props,\n    ref\n  }));\n}\nexport { IMaskMixin as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}